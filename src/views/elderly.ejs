<%- include('partials/header', { title: 'Elderly Dashboard', user: user }) %>

<!--
  Stylesheet Section
  Contains CSS styles tailored for elderly users, focusing on larger text, bigger buttons,
  high contrast, and simplified navigation.
-->
<style>
  /* Base Styles */
  body {
    font-family: Arial, sans-serif; /* Clear and legible font */
    font-size: 20px; /* Increased base font size for better readability */
    background-color: #f0f8ff; /* Light blue background for a calming effect */
    color: #333333; /* Dark text for high contrast */
    line-height: 1.6; /* Increased line height for easier reading */
    padding: 20px; /* Padding around the content */
  }

  /* Heading Styles */
  h1, h2 {
    color: #2c3e50; /* Dark blue for headings */
    text-align: center; /* Centered headings for better visibility */
  }

  /* Card Component Styles */
  .card {
    background-color: #ffffff; /* White background for clarity */
    border-radius: 10px; /* More pronounced rounded corners */
    box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15); /* Enhanced shadow for depth */
    padding: 30px; /* Increased padding for spaciousness */
    margin: 20px auto; /* Centered card with margin */
    max-width: 800px; /* Maximum width for better focus */
  }

  /* Form Label Styles */
  .form-label {
    font-weight: bold; /* Bold labels for emphasis */
    font-size: 22px; /* Larger font size for labels */
  }

  /* Textarea Styles */
  textarea {
    font-size: 20px; /* Larger text within textarea */
    padding: 15px; /* Increased padding for comfort */
    border: 2px solid #ccc; /* Thicker border for better visibility */
    border-radius: 8px; /* Rounded corners */
    resize: vertical; /* Allow vertical resizing only */
  }

  /* Button Styles */
  .btn {
    padding: 15px 25px; /* Larger padding for easier clicking */
    font-size: 20px; /* Larger font size for buttons */
    border-radius: 8px; /* Rounded buttons */
    cursor: pointer; /* Pointer cursor on hover */
    transition: background-color 0.3s ease; /* Smooth transition for hover effect */
    margin-top: 10px; /* Margin above buttons */
  }

  /* Primary Button Styles */
  .btn-primary {
    background-color: #007bff; /* Blue background */
    color: #ffffff; /* White text */
    border: none; /* No border */
  }

  .btn-primary:hover,
  .btn-primary:focus {
    background-color: #0056b3; /* Darker blue on hover/focus */
    outline: none; /* Remove default outline */
  }

  /* Secondary Button Styles */
  .btn-secondary {
    background-color: #6c757d; /* Gray background */
    color: #ffffff; /* White text */
    border: none; /* No border */
  }

  .btn-secondary:hover,
  .btn-secondary:focus {
    background-color: #5a6268; /* Darker gray on hover/focus */
    outline: none; /* Remove default outline */
  }

  /* Microphone Button Specific Styles */
  #mic-button {
    font-size: 28px; /* Larger icon for visibility */
    padding: 15px; /* Increased padding */
    margin-left: 10px; /* Space between textarea and mic button */
  }

  /* High Contrast Badge for Important Items */
  .badge-important {
    background-color: #e74c3c; /* Bright red for high visibility */
    color: #ffffff; /* White text */
    padding: 8px 15px; /* Larger padding for badge size */
    border-radius: 20px; /* Fully rounded badge */
    font-size: 18px; /* Larger font for readability */
    margin-left: 10px; /* Space between text and badge */
  }

  /* Active State Styling for Microphone Button */
  #mic-button.active {
    background-color: #c0392b; /* Darker red to indicate active state */
    color: #ffffff; /* White icon color when active */
  }

  /* List Group Item Styles */
  .list-group-item {
    font-size: 20px; /* Increased font size */
    padding: 20px; /* Increased padding for clickable area */
    border-bottom: 1px solid #ddd; /* Subtle divider */
    display: flex; /* Flex layout for content alignment */
    justify-content: space-between; /* Space between description and status */
    align-items: center; /* Vertical alignment */
  }

  /* Responsive Design for Smaller Screens */
  @media (max-width: 768px) {
    body {
      font-size: 18px; /* Slightly smaller font on tablets */
    }

    .btn {
      width: 100%; /* Full-width buttons on smaller screens */
      font-size: 18px; /* Adjusted font size */
    }

    #mic-button {
      width: 100%; /* Full-width microphone button */
      font-size: 24px; /* Adjusted icon size */
      margin-left: 0; /* Remove left margin */
      margin-top: 10px; /* Add top margin */
    }

    .list-group-item {
      flex-direction: column; /* Stack content vertically */
      align-items: flex-start; /* Align items to the start */
    }

    .badge-important {
      margin-left: 0; /* Remove left margin */
      margin-top: 10px; /* Add top margin */
    }
  }

  /* Accessibility: Focus Styles */
  .btn:focus,
  #mic-button:focus,
  #replay-voice:focus,
  #mute-voice:focus {
    outline: 3px solid #ffbf47; /* High-contrast outline for focused elements */
  }

  /* Screen Reader Only Class */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
  }

  /* Additional Styles for Active Microphone Button */
  #mic-button.active {
    background-color: #c0392b; /* Darker red to indicate active state */
    color: #ffffff; /* White icon color when active */
  }
</style>

<!--
  Main Container
  Encapsulates the entire dashboard content.
-->
<div class="container">
  <!--
    Welcome Heading
    Greets the user by their first name.
  -->
  <h1>Welcome, <%= user.firstname %>!</h1>

  <!--
    Voice Introduction Text
    Hidden from visual display but accessible to screen readers and used for speech synthesis.
  -->
  <p id="intro-text" class="sr-only">
    Welcome to the Elderly Dashboard. This website allows you to submit requests by typing or using your voice. You can also view the status of your requests. Use the microphone button for voice input or type your message in the box provided.
  </p>

  <!--
    Voice Control Buttons
    Allows users to replay or mute the introduction.
  -->
  <div class="controls" style="margin-bottom: 20px; text-align: center;">
    <!-- Replay Voice Button -->
    <button id="replay-voice" class="btn btn-primary" aria-label="Replay the introduction">
      🔊 Replay Introduction
    </button>
    <!-- Mute Voice Button -->
    <button id="mute-voice" class="btn btn-secondary" aria-label="Mute the introduction">
      🔇 Mute Introduction
    </button>
  </div>

  <!--
    Request Submission Form
    Allows users to submit their requests either by typing or using voice input.
    ARIA attributes enhance accessibility for screen readers.
  -->
  <div class="card" role="region" aria-labelledby="request-form-heading">
    <!--
      Hidden Heading for Screen Readers
      Provides context without displaying visually.
    -->
    <h2 id="request-form-heading" class="sr-only">Request Submission Form</h2>
    <form action="/api/users/requests" method="POST">
      <div class="mb-4">
        <label for="description" class="form-label">Write your request:</label>
        <div class="input-group">
          <!--
            Description Textarea
            Users can type their requests here. Includes a placeholder for guidance.
            ARIA attributes improve accessibility.
          -->
          <textarea
            id="description"
            name="description"
            rows="5"
            class="form-control"
            required
            aria-required="true"
            aria-label="Request Description"
            placeholder="Describe your request here..."
          ></textarea>
          <!--
            Microphone Button
            Initiates voice-to-text input. Accessible via ARIA labels.
          -->
          <button
            type="button"
            id="mic-button"
            class="btn btn-secondary"
            title="Start Voice Input"
            aria-label="Start Voice Input"
          >
            🎤
          </button>
        </div>
      </div>
      <!--
        Submit Button
        Allows users to submit their requests. Enhanced for accessibility.
      -->
      <button type="submit" class="btn btn-primary" aria-label="Submit Request">Submit</button>
    </form>
  </div>

  <!--
    User Requests Section
    Displays the list of requests submitted by the user.
    ARIA attributes ensure dynamic content updates are announced to assistive technologies.
  -->
  <h2>Your Requests</h2>
  <ul class="list-group" aria-live="polite">
    <% if (requests && requests.length > 0) { %>
      <% requests.forEach(request => { %>
        <li class="list-group-item">
          <div>
            <span><%= request.description %></span>
            <% if (request.priority) { %>
              <!--
                Important Badge
                Highlights requests marked as important.
              -->
              <span class="badge-important" aria-label="Important">Important</span>
            <% } %>
          </div>
          <div>
            <strong><%= request.status %></strong>
          </div>
        </li>
      <% }) %>
    <% } else { %>
      <!--
        No Requests Message
        Informs the user when no requests are found.
      -->
      <p>No requests found.</p>
    <% } %>
  </ul>
</div>

<!--
  Speech Recognition Script
  Implements the voice-to-text functionality using the Web Speech API.
  Includes error handling and user feedback for better accessibility.
-->
<script>
  // Check for browser compatibility with SpeechRecognition API
  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

  if ('SpeechRecognition' in window) {
    // Initialize SpeechRecognition
    const recognition = new SpeechRecognition();
    recognition.continuous = false; // Stop automatically after a single result
    recognition.lang = 'en-US'; // Language set to US English
    recognition.interimResults = false; // Do not return interim results
    recognition.maxAlternatives = 1; // Maximum number of alternatives

    // Get DOM elements
    const micButton = document.getElementById('mic-button');
    const descriptionTextarea = document.getElementById('description');

    let isListening = false; // Flag to track listening state

    // Event listener for microphone button click
    micButton.addEventListener('click', () => {
      if (!isListening) {
        recognition.start(); // Start speech recognition
      } else {
        recognition.stop(); // Stop speech recognition
      }
    });

    // Event handler for when speech recognition starts
    recognition.onstart = () => {
      isListening = true;
      micButton.classList.add('active'); // Add active class for styling
      micButton.title = 'Stop Voice Input'; // Update tooltip
      micButton.innerHTML = '⏹️'; // Change icon to stop symbol
    };

    // Event handler for when speech recognition ends
    recognition.onend = () => {
      isListening = false;
      micButton.classList.remove('active'); // Remove active class
      micButton.title = 'Start Voice Input'; // Revert tooltip
      micButton.innerHTML = '🎤'; // Revert icon to microphone
    };

    // Event handler for successful speech recognition result
    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript; // Get transcribed text
      descriptionTextarea.value += ' ' + transcript; // Append to textarea
      descriptionTextarea.focus(); // Focus back on textarea for continuous input
    };

    // Event handler for speech recognition errors
    recognition.onerror = (event) => {
      console.error('Speech recognition error detected: ' + event.error); // Log error
      alert('An error occurred during speech recognition: ' + event.error); // Alert user
      isListening = false;
      micButton.classList.remove('active'); // Remove active class
      micButton.title = 'Start Voice Input'; // Revert tooltip
      micButton.innerHTML = '🎤'; // Revert icon to microphone
    };
  } else {
    // Fallback for browsers that do not support SpeechRecognition
    const micButton = document.getElementById('mic-button');
    micButton.style.display = 'none'; // Hide the mic button
    console.warn('Speech Recognition API not supported in this browser.');
  }
</script>

<!--
  Voice Introduction Script
  Implements the speech synthesis functionality using the Web Speech API.
  Includes error handling and user feedback for better accessibility.
-->
<script>
  // Get the introduction text from the hidden paragraph
  const introTextElement = document.getElementById('intro-text');
  const introText = introTextElement ? introTextElement.textContent : '';

  // Get control buttons
  const replayButton = document.getElementById('replay-voice');
  const muteButton = document.getElementById('mute-voice');

  let isMuted = false; // Flag to track mute state

  // Function to speak text
  function speakText(text) {
    if (!isMuted && 'speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'en-US'; // Set language
      utterance.pitch = 1; // Set pitch
      utterance.rate = 0.9; // Set speaking rate (slower for clarity)
      speechSynthesis.speak(utterance);
    }
  }

  // Automatically speak the introduction when the page loads
  window.addEventListener('load', () => {
    if (introText.trim() !== '') {
      speakText(introText);
    } else {
      console.warn('Introduction text is empty. Speech synthesis will not play.');
    }
  });

  // Replay the introduction
  replayButton.addEventListener('click', () => {
    if (introText.trim() !== '') {
      speakText(introText);
    } else {
      console.warn('Introduction text is empty. Cannot replay speech.');
    }
  });

  // Mute the introduction
  muteButton.addEventListener('click', () => {
    isMuted = !isMuted; // Toggle mute state
    muteButton.textContent = isMuted ? '🔈 Unmute Introduction' : '🔇 Mute Introduction';
    muteButton.setAttribute('aria-label', isMuted ? 'Unmute the introduction' : 'Mute the introduction');

    if (isMuted) {
      speechSynthesis.cancel(); // Stop any ongoing speech
    }
  });
</script>

<%- include('partials/footer') %>



